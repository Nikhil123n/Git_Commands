init / add / commit / push

$ git init


for Staging Changes
for all
$ git add .
for particular
$ git add name_of_file


for commit to local repository
for all 
$ git commit -a -m "message ieipe  i"
for particular 
$ git commit "name of dkjd  file"
----> outpus such this 
    [master (root-commit) 2d4f27f] testing git functionalities
    1 file changed, 0 insertions(+), 0 deletions(-)
    create mode 100644 .readme

# Note above commit is to master which is a local repository branch means our computer


Remote  - like pipeline  - which connects our local repository to global repository

to add remote 
git remote add "temp_name_for_our_remote_repository_on_github" link_to_repo
$ git remote add origin https://github.com/Nikhil123n/Mask_RCNN.git
the remote is now as named 
"orgin" as global repository and
"master" as local repository - branch


last step is to push the commits
$ git push remote_name which_branch
$ git push origin master



to change the branch 
git checkout "name of another branch if it has"
$ git checkout new_story


Pull all the new changes on github repository
$ git pull
$ git pull origin master 
origin - remote - global repository on github - link 
master - branch - local repository

To List out all the remote github repository initiated
$ git remote -v
origin  https://github.com/Nikhil123n/Mask_RCNN.git (fetch)
origin  https://github.com/Nikhil123n/Mask_RCNN.git (push)


To remove the remote repository
$ git remote remove origin
will remove the origin remote


When we had made changes to our code and which we dont want to commit or staged
we can make use of git stash
it's like a container - that stores the stashed files which we are not willing to commit now but we might need later so to store as stashs
Below line will stash all the changes (unstaged changes) and gives a random name to that stash container
$ git stash 
Below line will stash changes in container that as our name "hsuhf fu"
$ git stash -m "hsuhf fu"

To list out all how much elements, files we had stashed
$ git stash list

to apply changes to previously latest stashed 
$ git stash apply

to stash a particular stash container
$ git stash apply stash@{2}

to delete latest stashec container
$ git stash pop
to delete particular stash
$ git stash drop stash@{2}


To clear all the stash container
$ git stash clear


To create a branch from the stash container
With use of stash to create branch on local computer
$ git stash branch "name_of_new_branch" stash@{2}



To Rename the name of the branch - local 
$ git branch -m old-name new-name

To verify we are in which branch
$ git branch -a
Output:::
    * master
    remotes/origin/master
Here the '*' astrik indicates our current branch


Rename a Remote Git Branch
- Verify the local branch has the correct name:
$ git branch -a
- Next, delete the branch with the old name on the remote repository:
$ git push origin --delete old-name
- The output confirms that the branch was deleted.
- System confirms old git branch was deleted
- Finally, push the branch with the correct name, and reset the upstream branch:
$ git push origin -u new-name
- Alternatively, you can overwrite the remote branch with a single command:
$ git push origin :old-name new-name
- Resetting the upstream branch is still required:
$ git push origin -u new-name

